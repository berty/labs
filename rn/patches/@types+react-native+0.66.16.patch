diff --git a/node_modules/@types/react-native/globals.d.ts b/node_modules/@types/react-native/globals.d.ts
index 8b41056..98a9f6c 100755
--- a/node_modules/@types/react-native/globals.d.ts
+++ b/node_modules/@types/react-native/globals.d.ts
@@ -291,54 +291,6 @@ declare var XMLHttpRequestUpload: {
 
 declare type XMLHttpRequestResponseType = '' | 'arraybuffer' | 'blob' | 'document' | 'json' | 'text';
 
-/**
- * Based on definition from lib.dom but using class syntax.
- * The properties are mutable to support users that use a `URL` polyfill, but the implementation
- * built into React Native (as of 0.63) does not implement all the properties.
- */
-declare class URL {
-    static createObjectURL(blob: Blob): string;
-    static revokeObjectURL(url: string): void;
-
-    constructor(url: string, base?: string);
-
-    href: string;
-    readonly origin: string;
-    protocol: string;
-    username: string;
-    password: string;
-    host: string;
-    hostname: string;
-    port: string;
-    pathname: string;
-    search: string;
-    readonly searchParams: URLSearchParams;
-    hash: string;
-
-    toJSON(): string;
-}
-
-/**
- * Based on definitions of lib.dom and lib.dom.iterable
- */
-declare class URLSearchParams {
-    constructor(init?: string[][] | Record<string, string> | string | URLSearchParams);
-
-    append(name: string, value: string): void;
-    delete(name: string): void;
-    get(name: string): string | null;
-    getAll(name: string): string[];
-    has(name: string): boolean;
-    set(name: string, value: string): void;
-    sort(): void;
-    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;
-    [Symbol.iterator](): IterableIterator<[string, string]>;
-
-    entries(): IterableIterator<[string, string]>;
-    keys(): IterableIterator<string>;
-    values(): IterableIterator<string>;
-}
-
 interface WebSocketMessageEvent extends Event {
     data?: any;
 }
@@ -397,56 +349,6 @@ interface AbortEvent extends Event {
     type: 'abort';
 }
 
-declare class AbortSignal implements EventTarget {
-    /**
-     * AbortSignal cannot be constructed directly.
-     */
-    constructor();
-    /**
-     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
-     */
-    readonly aborted: boolean;
-
-    onabort: (event: AbortEvent) => void;
-
-    addEventListener: (
-        type: 'abort',
-        listener: (this: AbortSignal, event: any) => any,
-        options?:
-            | boolean
-            | {
-                  capture?: boolean;
-                  once?: boolean;
-                  passive?: boolean;
-              },
-    ) => void;
-
-    removeEventListener: (
-        type: 'abort',
-        listener: (this: AbortSignal, event: any) => any,
-        options?:
-            | boolean
-            | {
-                  capture?: boolean;
-              },
-    ) => void;
-}
-
-declare class AbortController {
-    /**
-     * Initialize this controller.
-     */
-    constructor();
-    /**
-     * Returns the `AbortSignal` object associated with this object.
-     */
-    readonly signal: AbortSignal;
-    /**
-     * Abort and signal to any observers that the associated activity is to be aborted.
-     */
-    abort(): void;
-}
-
 interface FileReaderEventMap {
     abort: ProgressEvent<FileReader>;
     error: ProgressEvent<FileReader>;
