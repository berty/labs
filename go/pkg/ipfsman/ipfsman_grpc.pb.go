// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ipfsman/v1/ipfsman.proto

package ipfsman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPFSManagerServiceClient is the client API for IPFSManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPFSManagerServiceClient interface {
	StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error)
	StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*StopNodeResponse, error)
}

type iPFSManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPFSManagerServiceClient(cc grpc.ClientConnInterface) IPFSManagerServiceClient {
	return &iPFSManagerServiceClient{cc}
}

func (c *iPFSManagerServiceClient) StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error) {
	out := new(StartNodeResponse)
	err := c.cc.Invoke(ctx, "/ipfsman.v1.IPFSManagerService/StartNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPFSManagerServiceClient) StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*StopNodeResponse, error) {
	out := new(StopNodeResponse)
	err := c.cc.Invoke(ctx, "/ipfsman.v1.IPFSManagerService/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPFSManagerServiceServer is the server API for IPFSManagerService service.
// All implementations must embed UnimplementedIPFSManagerServiceServer
// for forward compatibility
type IPFSManagerServiceServer interface {
	StartNode(context.Context, *StartNodeRequest) (*StartNodeResponse, error)
	StopNode(context.Context, *StopNodeRequest) (*StopNodeResponse, error)
	mustEmbedUnimplementedIPFSManagerServiceServer()
}

// UnimplementedIPFSManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPFSManagerServiceServer struct {
}

func (UnimplementedIPFSManagerServiceServer) StartNode(context.Context, *StartNodeRequest) (*StartNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNode not implemented")
}
func (UnimplementedIPFSManagerServiceServer) StopNode(context.Context, *StopNodeRequest) (*StopNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (UnimplementedIPFSManagerServiceServer) mustEmbedUnimplementedIPFSManagerServiceServer() {}

// UnsafeIPFSManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPFSManagerServiceServer will
// result in compilation errors.
type UnsafeIPFSManagerServiceServer interface {
	mustEmbedUnimplementedIPFSManagerServiceServer()
}

func RegisterIPFSManagerServiceServer(s grpc.ServiceRegistrar, srv IPFSManagerServiceServer) {
	s.RegisterService(&IPFSManagerService_ServiceDesc, srv)
}

func _IPFSManagerService_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFSManagerServiceServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfsman.v1.IPFSManagerService/StartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFSManagerServiceServer).StartNode(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPFSManagerService_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFSManagerServiceServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfsman.v1.IPFSManagerService/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFSManagerServiceServer).StopNode(ctx, req.(*StopNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPFSManagerService_ServiceDesc is the grpc.ServiceDesc for IPFSManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPFSManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipfsman.v1.IPFSManagerService",
	HandlerType: (*IPFSManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartNode",
			Handler:    _IPFSManagerService_StartNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _IPFSManagerService_StopNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipfsman/v1/ipfsman.proto",
}
